datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Roles {
  PUBLISHER
  APPROVER
  ADMIN
  DEVELOPER
}

enum ProjectStatus {
  Draft
  Pending
  Approved
  Rejected
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique @db.VarChar(255)
  password      String?
  status        UserStatus    @default(ACTIVE)
  unionId       String?       @unique
  openId        String?       @unique
  nick          String?
  avatarUrl     String?
  mobile        String?
  stateCode     String?
  roles         UserRoles[]
  projects      Project[]     @relation("UserProjects")
  approved      Project[]     @relation("ApprovedBy")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UserRoles {
  id            Int           @id @default(autoincrement())
  userId        Int
  roleId        Int
  user          User          @relation(fields: [userId], references: [id])
  role          Role          @relation(fields: [roleId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@unique([userId, roleId])
}

model Role {
  id            Int               @id @default(autoincrement())
  name          Roles    @unique  @default(PUBLISHER)
  comment       String?
  users         UserRoles[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt   DateTime
}

model Project {
  id              Int           @id @default(autoincrement())
  name            String
  department_1    Json?
  department_2    Json?
  ownerId         Int
  approvedById    Int?
  approvedAt      DateTime?
  owner           User          @relation("UserProjects", fields: [ownerId], references: [id])
  approvedBy      User?         @relation("ApprovedBy", fields: [approvedById], references: [id])
  tags            ProjectTags[]
  status          ProjectStatus @default(Pending)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Tag {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  comment       String?
  projects      ProjectTags[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProjectTags {
  id            Int        @id @default(autoincrement())
  projectId     Int
  tagId         Int
  project       Project   @relation(fields: [projectId], references: [id])
  tag           Tag       @relation(fields: [tagId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([projectId, tagId])
}

model Log {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recordId    Int
  recordTitle String?  @db.VarChar(128)
  difference  Json?    @db.Json
  action      String   @db.VarChar(128)
  resource    String   @db.VarChar(128)
  userId      String   @db.VarChar(128)
}
